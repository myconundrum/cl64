(ns cl64.computer)

;
; 6502/C64 constant values
;
(def stack-base 0x0100)
(def nmi-address 0xfffa)
(def reset-address 0xfffc)
(def break-address 0xfffe)
(def memory-size 0x10000) 

;
; opcodes by addressing mode.
;
(def immediate-mode-ops  #{0x69 0x29 0xc9 0xe0 0xc0 0x49 0xa9 0xa2 0xa0 0x09 0xe9})
(def zeropage-mode-ops  #{0x65 0x25 0x06 0x24 0xc5 0xe4 0xc4 0xc6 0x45 0xe6 0xa5 0xa6 0xa4 0x46 0x05 0x26 0x66 0xe5 0x85 0x86 0x84})
(def zeropagex-mode-ops #{0x75 0x35 0x16 0xd5 0xd6 0x55 0xf6 0xb5 0xb4 0x56 0x15 0x36 0x76 0xf5 0x95 0x94})
(def zeropagey-mode-ops  #{0xb6 0x96})
(def absolute-mode-ops  #{0x6d 0x2d 0x0e 0x2c 0xcd 0xec 0xcc 0xce 0x4d 0xee 0x4c 0x20 0xad 0xae 0xac 0x4e 0x0d 0x2e 0x6e 0xed 0x8d 0x8e 0x8c})
(def absolutex-mode-ops #{0x7d 0x3d 0x1e 0xdd 0xde 0x5d 0xfe 0xbd 0xbc 0x5e 0x1d 0x3e 0x7e 0xfd 0x9d})
(def absolutey-mode-ops  #{0x79 0x39  0xd9 0x59 0xb9 0xbe 0x19 0xf9 0x99})
(def indirect-mode-ops  #{0x6c})
(def indexed-indirect-mode-ops #{0x61 0x21 0xc1 0x41 0xa1 0x01 0xe1 0x81})
(def indirect-indexed-mode-ops #{0x71 0x31 0xd1 0x51 0xb1 0x11 0xf1 0x91})
(def implied-mode-ops #{0x4a 0x0a 0x2a 0x6a 0x00 0x18 0xd8 0x58 0xb8 0xca 0x88 0xe8 0xc8 0xea 0x48 0x08 0x68 0x28 0x40 0x60 0x38 0xf8 0x78 0xaa 0xa8 0xba 0x8a 0x9a 0x98})
(def relative-mode-ops #{0x90 0xb0 0xf0 0x30 0xd0 0x10 0x50 0x70})


(defn byteify [value] (bit-and value 0xff))
(defn wordify 
  "takes two bytes in little endian format and turns them into a big endian word."
  [lo hi]
  (bit-or lo (bit-shift-left hi 8)))


(defn show-computer
  [c]
  (format "A: $%02X X: $%02X Y: $%02X PC: $%04X SP: $%02X P: $%02X\n ________ \n|NV-BDIZC|\n|%s|\n -------- " 
    (:a c) (:x c) (:y c) (:pc c) (:sp c) (:p c)
    (reduce (fn [s d] (str s d)) "" (take-last 8 (concat (repeat 8 \0) (Integer/toBinaryString (:p c) ))))))

(defn make-computer [] 
    {:a 0 :x 0 :y 0 :sp 0xff :p 0x24 :pc 0     ; registers
    	:mem (vec (replicate memory-size 0))      ; memory 
     :address nil                              ; computed address lines
     })